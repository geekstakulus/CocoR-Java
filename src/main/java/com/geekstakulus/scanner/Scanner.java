/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by Wolfgang Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
package com.geekstakulus.scanner;

import java.io.InputStream;
import java.util.Map;
import java.util.HashMap;
import com.geekstakulus.symbol.Token;
import com.geekstakulus.source.Buffer;
import com.geekstakulus.source.UTF8Buffer;
import com.geekstakulus.errors.FatalError;

//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------
public class Scanner {
	static final char EOL = '\n';
	static final int  eofSym = 0;
	static final int maxT = 44;
	static final int noSym = 44;


	public Buffer buffer; // scanner buffer

	Token t;           // current token
	int ch;            // current input character
	int pos;           // byte position of current character
	int charPos;       // position by unicode characters starting with 0
	int col;           // column number of current character
	int line;          // line number of current character
	int oldEols;       // EOLs that appeared in a comment;
	static final StartStates start; // maps initial token character to start state
	static final Map<String, Integer> literals;      // maps literal strings to literal kinds

	Token tokens;      // list of tokens already peeked (first token is a dummy)
	Token pt;          // current peek token
	
	char[] tval = new char[16]; // token text used in NextToken(), dynamically enlarged
	int tlen;          // length of current token


	static {
		start = new StartStates();
		literals = new HashMap<String, Integer>();
		for (int i = 65; i <= 90; ++i) start.set(i, 1);
		for (int i = 95; i <= 95; ++i) start.set(i, 1);
		for (int i = 97; i <= 122; ++i) start.set(i, 1);
		for (int i = 48; i <= 57; ++i) start.set(i, 2);
		start.set(34, 12); 
		start.set(39, 5); 
		start.set(36, 13); 
		start.set(61, 16); 
		start.set(46, 33); 
		start.set(43, 17); 
		start.set(45, 18); 
		start.set(60, 34); 
		start.set(94, 20); 
		start.set(62, 21); 
		start.set(44, 22); 
		start.set(91, 25); 
		start.set(93, 26); 
		start.set(124, 27); 
		start.set(40, 35); 
		start.set(41, 28); 
		start.set(123, 29); 
		start.set(125, 30); 
		start.set(Buffer.EOF, -1);
		literals.put("COMPILER", Integer.valueOf(6));
		literals.put("IGNORECASE", Integer.valueOf(7));
		literals.put("CHARACTERS", Integer.valueOf(8));
		literals.put("TOKENS", Integer.valueOf(9));
		literals.put("PRAGMAS", Integer.valueOf(10));
		literals.put("COMMENTS", Integer.valueOf(11));
		literals.put("FROM", Integer.valueOf(12));
		literals.put("TO", Integer.valueOf(13));
		literals.put("NESTED", Integer.valueOf(14));
		literals.put("IGNORE", Integer.valueOf(15));
		literals.put("PRODUCTIONS", Integer.valueOf(16));
		literals.put("END", Integer.valueOf(19));
		literals.put("ANY", Integer.valueOf(23));
		literals.put("out", Integer.valueOf(26));
		literals.put("WEAK", Integer.valueOf(34));
		literals.put("SYNC", Integer.valueOf(39));
		literals.put("IF", Integer.valueOf(40));
		literals.put("CONTEXT", Integer.valueOf(41));

	}
	
	public Scanner (String fileName) {
		buffer = new Buffer(fileName);
		Init();
	}
	
	public Scanner(InputStream s) {
		buffer = new Buffer(s);
		Init();
	}
	
	void Init () {
		pos = -1; line = 1; col = 0; charPos = -1;
		oldEols = 0;
		NextCh();
		if (ch == 0xEF) { // check optional byte order mark for UTF-8
			NextCh(); int ch1 = ch;
			NextCh(); int ch2 = ch;
			if (ch1 != 0xBB || ch2 != 0xBF) {
				throw new FatalError("Illegal byte order mark at start of file");
			}
			buffer = new UTF8Buffer(buffer); col = 0; charPos = -1;
			NextCh();
		}
		pt = tokens = new Token();  // first token is a dummy
	}
	
	void NextCh() {
		if (oldEols > 0) { ch = EOL; oldEols--; }
		else {
			pos = buffer.getPos();
			// buffer reads unicode chars, if UTF8 has been detected
			ch = buffer.Read(); col++; charPos++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == '\r' && buffer.Peek() != '\n') ch = EOL;
			if (ch == EOL) { line++; col = 0; }
		}

	}
	
	void AddCh() {
		if (tlen >= tval.length) {
			char[] newBuf = new char[2 * tval.length];
			System.arraycopy(tval, 0, newBuf, 0, tval.length);
			tval = newBuf;
		}
		if (ch != Buffer.EOF) {
			tval[tlen++] = (char)ch; 

			NextCh();
		}

	}
	

	boolean Comment0() {
		int level = 1, pos0 = pos, line0 = line, col0 = col, charPos0 = charPos;
		NextCh();
		if (ch == '/') {
			NextCh();
			for(;;) {
				if (ch == 10) {
					level--;
					if (level == 0) { oldEols = line - line0; NextCh(); return true; }
					NextCh();
				} else if (ch == Buffer.EOF) return false;
				else NextCh();
			}
		} else {
			buffer.setPos(pos0); NextCh(); line = line0; col = col0; charPos = charPos0;
		}
		return false;
	}

	boolean Comment1() {
		int level = 1, pos0 = pos, line0 = line, col0 = col, charPos0 = charPos;
		NextCh();
		if (ch == '*') {
			NextCh();
			for(;;) {
				if (ch == '*') {
					NextCh();
					if (ch == '/') {
						level--;
						if (level == 0) { oldEols = line - line0; NextCh(); return true; }
						NextCh();
					}
				} else if (ch == '/') {
					NextCh();
					if (ch == '*') {
						level++; NextCh();
					}
				} else if (ch == Buffer.EOF) return false;
				else NextCh();
			}
		} else {
			buffer.setPos(pos0); NextCh(); line = line0; col = col0; charPos = charPos0;
		}
		return false;
	}


	void CheckLiteral() {
		String val = t.val;

		Object kind = literals.get(val);
		if (kind != null) {
			t.kind = ((Integer) kind).intValue();
		}
	}

	Token NextToken() {
		while (ch == ' ' ||
			ch >= 9 && ch <= 10 || ch == 13
		) NextCh();
		if (ch == '/' && Comment0() ||ch == '/' && Comment1()) return NextToken();
		int recKind = noSym;
		int recEnd = pos;
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; t.charPos = charPos;
		int state = start.state(ch);
		tlen = 0; AddCh();

		loop: for (;;) {
			switch (state) {
				case -1: { t.kind = eofSym; break loop; } // NextCh already done 
				case 0: {
					if (recKind != noSym) {
						tlen = recEnd - t.pos;
						SetScannerBehindT();
					}
					t.kind = recKind; break loop;
				} // NextCh already done
				case 1:
					recEnd = pos; recKind = 1;
					if (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {AddCh(); state = 1; break;}
					else {t.kind = 1; t.val = new String(tval, 0, tlen); CheckLiteral(); return t;}
				case 2:
					recEnd = pos; recKind = 2;
					if (ch >= '0' && ch <= '9') {AddCh(); state = 2; break;}
					else {t.kind = 2; break loop;}
				case 3:
					{t.kind = 3; break loop;}
				case 4:
					{t.kind = 4; break loop;}
				case 5:
					if (ch <= 9 || ch >= 11 && ch <= 12 || ch >= 14 && ch <= '&' || ch >= '(' && ch <= '[' || ch >= ']' && ch <= 65535) {AddCh(); state = 6; break;}
					else if (ch == 92) {AddCh(); state = 7; break;}
					else {state = 0; break;}
				case 6:
					if (ch == 39) {AddCh(); state = 9; break;}
					else {state = 0; break;}
				case 7:
					if (ch >= ' ' && ch <= '~') {AddCh(); state = 8; break;}
					else {state = 0; break;}
				case 8:
					if (ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'f') {AddCh(); state = 8; break;}
					else if (ch == 39) {AddCh(); state = 9; break;}
					else {state = 0; break;}
				case 9:
					{t.kind = 5; break loop;}
				case 10:
					recEnd = pos; recKind = 45;
					if (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {AddCh(); state = 10; break;}
					else {t.kind = 45; break loop;}
				case 11:
					recEnd = pos; recKind = 46;
					if (ch >= '-' && ch <= '.' || ch >= '0' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {AddCh(); state = 11; break;}
					else {t.kind = 46; break loop;}
				case 12:
					if (ch <= 9 || ch >= 11 && ch <= 12 || ch >= 14 && ch <= '!' || ch >= '#' && ch <= '[' || ch >= ']' && ch <= 65535) {AddCh(); state = 12; break;}
					else if (ch == 10 || ch == 13) {AddCh(); state = 4; break;}
					else if (ch == '"') {AddCh(); state = 3; break;}
					else if (ch == 92) {AddCh(); state = 14; break;}
					else {state = 0; break;}
				case 13:
					recEnd = pos; recKind = 45;
					if (ch >= '0' && ch <= '9') {AddCh(); state = 10; break;}
					else if (ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {AddCh(); state = 15; break;}
					else {t.kind = 45; break loop;}
				case 14:
					if (ch >= ' ' && ch <= '~') {AddCh(); state = 12; break;}
					else {state = 0; break;}
				case 15:
					recEnd = pos; recKind = 45;
					if (ch >= '0' && ch <= '9') {AddCh(); state = 10; break;}
					else if (ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z') {AddCh(); state = 15; break;}
					else if (ch == '=') {AddCh(); state = 11; break;}
					else {t.kind = 45; break loop;}
				case 16:
					{t.kind = 17; break loop;}
				case 17:
					{t.kind = 20; break loop;}
				case 18:
					{t.kind = 21; break loop;}
				case 19:
					{t.kind = 22; break loop;}
				case 20:
					{t.kind = 25; break loop;}
				case 21:
					{t.kind = 27; break loop;}
				case 22:
					{t.kind = 28; break loop;}
				case 23:
					{t.kind = 29; break loop;}
				case 24:
					{t.kind = 30; break loop;}
				case 25:
					{t.kind = 31; break loop;}
				case 26:
					{t.kind = 32; break loop;}
				case 27:
					{t.kind = 33; break loop;}
				case 28:
					{t.kind = 36; break loop;}
				case 29:
					{t.kind = 37; break loop;}
				case 30:
					{t.kind = 38; break loop;}
				case 31:
					{t.kind = 42; break loop;}
				case 32:
					{t.kind = 43; break loop;}
				case 33:
					recEnd = pos; recKind = 18;
					if (ch == '.') {AddCh(); state = 19; break;}
					else if (ch == '>') {AddCh(); state = 24; break;}
					else if (ch == ')') {AddCh(); state = 32; break;}
					else {t.kind = 18; break loop;}
				case 34:
					recEnd = pos; recKind = 24;
					if (ch == '.') {AddCh(); state = 23; break;}
					else {t.kind = 24; break loop;}
				case 35:
					recEnd = pos; recKind = 35;
					if (ch == '.') {AddCh(); state = 31; break;}
					else {t.kind = 35; break loop;}

			}
		}
		t.val = new String(tval, 0, tlen);
		return t;
	}
	
	private void SetScannerBehindT() {
		buffer.setPos(t.pos);
		NextCh();
		line = t.line; col = t.col; charPos = t.charPos;
		for (int i = 0; i < tlen; i++) NextCh();
	}
	
	// get the next token (possibly a token already seen during peeking)
	public Token Scan () {
		if (tokens.next == null) {
			return NextToken();
		} else {
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	// get the next token, ignore pragmas
	public Token Peek () {
		do {
			if (pt.next == null) {
				pt.next = NextToken();
			}
			pt = pt.next;
		} while (pt.kind > maxT); // skip pragmas

		return pt;
	}

	// make sure that peeking starts at current scan position
	public void ResetPeek () { pt = tokens; }

} // end Scanner
